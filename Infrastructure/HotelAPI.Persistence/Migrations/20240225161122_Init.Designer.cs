// <auto-generated />
using System;
using HotelAPI.Persistence.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelAPI.Persistence.Migrations
{
    [DbContext(typeof(HotelAppContext))]
    [Migration("20240225161122_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EquipmentRoom", b =>
                {
                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("EquipmentRoom", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.AboutApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AboutApps", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppName = "Hotel Management System",
                            AppVersion = "1.0.1",
                            Content = "Hotel Management System Application",
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 605, DateTimeKind.Local).AddTicks(3295),
                            EntityStatus = 0,
                            Site = "www.hms.com"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.ApplicationError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationErrors", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(6060),
                            EntityStatus = 0,
                            Name = "Baku",
                            PostalCode = "1000"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(6737),
                            EntityStatus = 0,
                            Name = "Istanbul",
                            PostalCode = "2205"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(6740),
                            EntityStatus = 0,
                            Name = "Roma",
                            PostalCode = "3001"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(6741),
                            EntityStatus = 0,
                            Name = "Moscow",
                            PostalCode = "4140"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(6743),
                            EntityStatus = 0,
                            Name = "Paris",
                            PostalCode = "5005"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(5404),
                            EntityStatus = 0,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(5700),
                            EntityStatus = 0,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(5702),
                            EntityStatus = 0,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(5703),
                            EntityStatus = 0,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(5753),
                            EntityStatus = 0,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Equipments", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(681),
                            EntityStatus = 0,
                            Name = "Bed"
                        },
                        new
                        {
                            Id = 2,
                            Count = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(1036),
                            EntityStatus = 0,
                            Name = "Twin Beds"
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(1038),
                            EntityStatus = 0,
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = 4,
                            Count = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(1040),
                            EntityStatus = 0,
                            Name = " LCD TV"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Nizami street,45",
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(7025),
                            Email = "grandhayat@gmail.com",
                            EntityStatus = 0,
                            Grade = 5,
                            Name = "Grand Hayat",
                            PhoneNumber = "+994775005050",
                            WebSite = "grandh.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nasimi District",
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8276),
                            Email = "marriotbaku@gmail.com",
                            EntityStatus = 0,
                            Grade = 5,
                            Name = "Courtyard by Marriott Baku",
                            PhoneNumber = "+994775005050",
                            WebSite = "marriotbaku.com"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sultanahmet",
                            CityId = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8280),
                            Email = "sarikonak@hot.com",
                            EntityStatus = 0,
                            Grade = 4,
                            Name = "Hotel Sari Konak",
                            PhoneNumber = "+094775005050",
                            WebSite = "sarikonakhotel.tr.com"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("HotelRatings", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NetworkStatus")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a977f10-993c-486e-bdcc-55cd2d4c4af8",
                            CreateDate = new DateTime(2024, 2, 25, 20, 11, 21, 617, DateTimeKind.Local).AddTicks(1566),
                            Email = "arzu@gmail.com",
                            EmailConfirmed = false,
                            EntityStatus = 0,
                            FirstName = "Arzu",
                            LastName = "Teymurova",
                            LockoutEnabled = false,
                            NetworkStatus = 0,
                            PasswordHash = "AQAAAAIAAYagAAAAEMj+JUb8HIfqj1KrkZf+Ouw6v0AXpNgFSdPE5FN0RVmGkoH8TcP+moQrRs1PQgccIA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Arzu"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelUserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelUserId")
                        .IsUnique();

                    b.ToTable("HotelUserImages", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 2, 25, 20, 11, 21, 606, DateTimeKind.Local).AddTicks(3909),
                            EntityStatus = 0,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 2, 25, 20, 11, 21, 617, DateTimeKind.Local).AddTicks(642),
                            EntityStatus = 0,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 2, 25, 20, 11, 21, 617, DateTimeKind.Local).AddTicks(689),
                            EntityStatus = 0,
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Reservator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Reservators", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelUserId");

                    b.ToTable("Reviews", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("Floor")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<double>("Price")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.Property<int>("RoomState")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(9204),
                            EntityStatus = 0,
                            Floor = 3,
                            HotelId = 1,
                            Number = 100,
                            Phone = "1240044444",
                            Price = 150.0,
                            RoomState = 0,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(427),
                            EntityStatus = 0,
                            Floor = 2,
                            HotelId = 2,
                            Number = 128,
                            Phone = "1240044444",
                            Price = 250.0,
                            RoomState = 0,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(431),
                            EntityStatus = 0,
                            Floor = 4,
                            HotelId = 3,
                            Number = 246,
                            Phone = "1240044444",
                            Price = 350.0,
                            RoomState = 2,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 705, DateTimeKind.Local).AddTicks(434),
                            EntityStatus = 0,
                            Floor = 4,
                            HotelId = 3,
                            Number = 238,
                            Phone = "1240044444",
                            Price = 400.0,
                            RoomState = 1,
                            RoomTypeId = 3
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages", "Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", "Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8533),
                            Description = " 1 King Bed, Smoking, Sea View",
                            EntityStatus = 0,
                            Name = "Deluxe Room"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8907),
                            Description = "1 Double Bed",
                            EntityStatus = 0,
                            Name = "Family Room"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8909),
                            Description = "1 Bedroom, Terrace, Sea View",
                            EntityStatus = 0,
                            Name = "Suite Room"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 2, 25, 20, 11, 21, 704, DateTimeKind.Local).AddTicks(8911),
                            Description = "1 King Bed, Sea View",
                            EntityStatus = 0,
                            Name = "King Room"
                        });
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.UserLoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("int");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HotelUserId");

                    b.ToTable("UserLoginHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EquipmentRoom", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.City", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelImage", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelRating", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Ratings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelUserImage", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", "HotelUser")
                        .WithOne("HotelUserImage")
                        .HasForeignKey("HotelAPI.Domain.Entities.HotelUserImage", "HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelUser");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", "HotelUser")
                        .WithMany("Reservations")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", "HotelUser")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelUser");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Room", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.RoomImage", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.UserLoginHistory", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", "HotelUser")
                        .WithMany("UserLoginHistory")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotelAPI.Domain.Entities.HotelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("HotelImages");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.HotelUser", b =>
                {
                    b.Navigation("HotelUserImage")
                        .IsRequired();

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserLoginHistory");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("HotelAPI.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
